name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Warm cache (user-service)
        uses: docker/build-push-action@v5
        with:
          context: ./user-service
          push: false
          tags: tmp/user-service:ci
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Warm cache (notification-service)
        uses: docker/build-push-action@v5
        with:
          context: ./notification-service
          push: false
          tags: tmp/notification-service:ci
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build gateway config (CI limits)
        run: |
          export GW_RATE_LIMIT=100r/s
          export GW_BURST=200
          make gw-build-conf

      - name: Make up (build and start stack)
        run: make up

      - name: Wait for services to start
        run: |
          set -e
          echo "Giving services time to initialize..."
          sleep 60
          
          echo "Checking container status..."
          docker compose -f infra/docker-compose.yml ps
          
          echo "Testing basic connectivity..."
          # Simple connectivity test without complex health checks
          for i in {1..20}; do
            echo "Connectivity test attempt $i/20..."
            
            # Test if we can reach the gateway at all
            if curl -s --max-time 5 http://localhost:8082 >/dev/null 2>&1; then
              echo "✅ Gateway is responding to requests"
              break
            elif [ $i -eq 20 ]; then
              echo "❌ Gateway not responding after 20 attempts"
              echo "Container status:"
              docker compose -f infra/docker-compose.yml ps
              echo "Gateway logs:"
              docker compose -f infra/docker-compose.yml logs gateway
              exit 1
            else
              echo "Gateway not ready, waiting..."
              sleep 5
            fi
          done

      - name: Gateway config test
        run: make gw-config-test

      - name: Run and verify user-service migrations
        run: |
          set -e
          echo "Waiting a bit to ensure DB is fully ready..."
          sleep 10

          cd infra
          echo "== Doctrine migration status (before) =="
          docker compose exec -T user-service php bin/console doctrine:migrations:status || true

          echo "== Running migrations explicitly =="
          docker compose exec -T user-service php bin/console doctrine:migrations:migrate --no-interaction || true

          echo "== Verifying users table exists =="
          if docker compose exec -T user-service php bin/console dbal:run-sql "DESCRIBE users" >/dev/null 2>&1; then
            echo "Users table present."
          else
            echo "Users table missing. Dumping DB info & rerunning migration..."
            docker compose exec -T user-service php -r 'echo getenv("DATABASE_URL"),"\n";'
            docker compose exec -T user-service php bin/console doctrine:migrations:status || true
            docker compose exec -T user-service php bin/console doctrine:migrations:migrate --no-interaction || true
            echo "== DESCRIBE users (after retry) =="
            docker compose exec -T user-service php bin/console dbal:run-sql "DESCRIBE users"
          fi

      - name: Install script dependencies (jq)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Smoke test
        run: make smoke

      - name: E2E test
        run: make e2e

      - name: Export OpenAPI specs
        run: bash scripts/export-openapi.sh

      - name: Upload OpenAPI artifacts
        uses: actions/upload-artifact@v4
        with:
          name: openapi-specs
          path: docs/*.openapi.json

      - name: Show container statuses
        run: make ps || true

      - name: Gather logs on failure
        if: failure()
        run: make logs || true

      - name: Tear down
        if: always()
        run: make down

  push-images:
    name: Push Images (optional)
    needs: [test]
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    env:
      CR_PAT: ${{ secrets.CR_PAT }}
    steps:
      - name: No CR_PAT, skipping image push
        if: ${{ env.CR_PAT == '' }}
        run: echo "CR_PAT not set; skipping image push job"
        continue-on-error: true

      - name: Checkout
        if: ${{ env.CR_PAT != '' }}
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        if: ${{ env.CR_PAT != '' }}
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        if: ${{ env.CR_PAT != '' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ env.CR_PAT }}

      - name: Build and push user-service
        if: ${{ env.CR_PAT != '' }}
        uses: docker/build-push-action@v5
        with:
          context: ./user-service
          push: true
          tags: |
            ghcr.io/${{ github.repository }}-user-service:latest
            ghcr.io/${{ github.repository }}-user-service:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push notification-service
        if: ${{ env.CR_PAT != '' }}
        uses: docker/build-push-action@v5
        with:
          context: ./notification-service
          push: true
          tags: |
            ghcr.io/${{ github.repository }}-notification-service:latest
            ghcr.io/${{ github.repository }}-notification-service:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Server (optional)
    needs: [test]
    runs-on: ubuntu-latest
    env:
      SSH_HOST: ${{ secrets.SSH_HOST }}
      SSH_USER: ${{ secrets.SSH_USER }}
      SSH_KEY: ${{ secrets.SSH_KEY }}
    steps:
      - name: Missing SSH secrets, skipping deploy
        if: ${{ env.SSH_HOST == '' || env.SSH_USER == '' || env.SSH_KEY == '' }}
        run: echo "SSH secrets not set; skipping deploy job"

      - name: Checkout
        if: ${{ env.SSH_HOST != '' && env.SSH_USER != '' && env.SSH_KEY != '' }}
        uses: actions/checkout@v4

      - name: Install SSH client
        if: ${{ env.SSH_HOST != '' && env.SSH_USER != '' && env.SSH_KEY != '' }}
        run: sudo apt-get update && sudo apt-get install -y openssh-client rsync

      - name: Set up SSH key
        if: ${{ env.SSH_HOST != '' && env.SSH_USER != '' && env.SSH_KEY != '' }}
        run: |
          mkdir -p ~/.ssh
          echo "${{ env.SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H "${{ env.SSH_HOST }}" >> ~/.ssh/known_hosts

      - name: Sync repository to server
        if: ${{ env.SSH_HOST != '' && env.SSH_USER != '' && env.SSH_KEY != '' }}
        run: |
          rsync -az --delete \
            --exclude '.git' \
            ./ ${{ env.SSH_USER }}@${{ env.SSH_HOST }}:~/microservices-architecture/

      - name: Compose up on server
        if: ${{ env.SSH_HOST != '' && env.SSH_USER != '' && env.SSH_KEY != '' }}
        env:
          SSH_HOST: ${{ env.SSH_HOST }}
          SSH_USER: ${{ env.SSH_USER }}
        run: |
          ssh $SSH_USER@$SSH_HOST <<'EOF'
          set -e
          cd ~/microservices-architecture/infra
          docker compose pull || true
          docker compose up -d --build
          docker compose ps
          EOF
