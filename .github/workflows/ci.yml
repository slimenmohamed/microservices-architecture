name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Warm cache (user-service)
        uses: docker/build-push-action@v5
        with:
          context: ./user-service
          push: false
          tags: tmp/user-service:ci
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Warm cache (notification-service)
        uses: docker/build-push-action@v5
        with:
          context: ./notification-service
          push: false
          tags: tmp/notification-service:ci
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Make up (build and start stack)
        run: make up

      - name: Wait for Docker Compose services
        run: |
          set -e
          echo "Waiting for Docker Compose to report services as healthy..."
          
          # Wait for compose services to be healthy (uses healthchecks)
          timeout 300 bash -c '
            while true; do
              if docker compose -f infra/docker-compose.yml ps --format json | jq -r ".[].Health" | grep -v "healthy" | grep -q .; then
                echo "Some services not healthy yet..."
                docker compose -f infra/docker-compose.yml ps
                sleep 10
              else
                echo "✅ All services report healthy"
                break
              fi
            done
          ' || {
            echo "❌ Timeout waiting for services to be healthy"
            echo "Final container status:"
            docker compose -f infra/docker-compose.yml ps
            echo "Logs from all services:"
            docker compose -f infra/docker-compose.yml logs --tail=50
            exit 1
          }

      - name: Verify HTTP endpoints
        run: |
          set -e
          echo "Testing HTTP endpoints..."
          
          # Test each endpoint with retries
          for endpoint in "http://localhost:8082/health" "http://localhost:8080/health" "http://localhost:8081/health"; do
            echo "Testing $endpoint..."
            for i in {1..10}; do
              if curl -fsS --max-time 10 "$endpoint" >/dev/null 2>&1; then
                echo "✅ $endpoint is responding"
                break
              elif [ $i -eq 10 ]; then
                echo "❌ $endpoint failed after 10 attempts"
                echo "Attempting to show response:"
                curl -v "$endpoint" || true
                exit 1
              else
                echo "Attempt $i failed, retrying..."
                sleep 3
              fi
            done
          done
          
          echo "✅ All HTTP endpoints are responding"

      - name: Migrate user-service
        run: make migrate

      - name: Install script dependencies (jq)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Smoke test
        run: make smoke

      - name: E2E test
        run: make e2e

      - name: Export OpenAPI specs
        run: bash scripts/export-openapi.sh

      - name: Upload OpenAPI artifacts
        uses: actions/upload-artifact@v4
        with:
          name: openapi-specs
          path: docs/*.openapi.json

      - name: Show container statuses
        run: make ps || true

      - name: Gather logs on failure
        if: failure()
        run: make logs || true

      - name: Tear down
        if: always()
        run: make down
